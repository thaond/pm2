DROP INDEX IDX_QUOTE_DATEID;
DROP INDEX IDX_QUOTE_STOCKID;
DROP TABLE CA_BONUS_MAPPING;
DROP TABLE CA_SPLIT_MAPPING;
DROP TABLE QUOTE;
DROP TABLE MARKETDATE;
DROP TABLE TRADE;
DROP TABLE WATCHLIST;
DROP TABLE WATCHLISTGROUP;
DROP TABLE CA_DIVIDENT;
DROP TABLE CA_SPLIT;
DROP TABLE CA_BONUS;
DROP TABLE CA_DEMERGER_MAPPING;
DROP TABLE CA_DEMERGERLIST;
DROP TABLE CA_DEMERGERBASE;
DROP TABLE SELLTRANSACTION;
DROP TABLE IPO;
DROP TABLE BUYTRANSACTION;
DROP TABLE STOPLOSS;
DROP TABLE STOCKMASTER;
DROP TABLE PORTFOLIO;
DROP TABLE TRADINGACC;

CREATE TABLE STOCKMASTER (
	ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1000),
	STOCKCODE VARCHAR(10),
	COMPANYNAME VARCHAR(50),
	SERIES SMALLINT,
	PAIDUPVALUE FLOAT(2),
	MARKETLOT SMALLINT,
	FACEVALUE FLOAT(2),
	DATEOFLIST INTEGER,
	ISIN VARCHAR(15),
	LISTED SMALLINT
);

CREATE TABLE MARKETDATE (
	DATEVAL INT PRIMARY KEY
);

CREATE TABLE QUOTE (
	STOCKID INT,
	DATEID INT,
	SOPEN FLOAT(2),
	SHIGH FLOAT(2),
	SLOW FLOAT(2),
	SCLOSE FLOAT(2),
	SPREVCLOSE FLOAT(2),
	SVOLUME FLOAT(2),
	STRADEVALUE FLOAT(2),
	SPERDELIVERYQTY FLOAT(2),
	FOREIGN KEY (STOCKID) REFERENCES STOCKMASTER(ID),
	FOREIGN KEY (DATEID) REFERENCES MARKETDATE(DATEVAL)
);

CREATE INDEX IDX_QUOTE_DATEID ON QUOTE (
	DATEID
);

CREATE INDEX IDX_QUOTE_STOCKID ON QUOTE (
	STOCKID
);

CREATE TABLE PORTFOLIO (
	ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1000),
	NAME VARCHAR(20) NOT NULL ,
	ALERT SMALLINT
);

CREATE TABLE TRADINGACC (
	ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1000),
	NAME VARCHAR(20) NOT NULL ,
	BROKERAGETYPE VARCHAR(20)
);

CREATE TABLE BUYTRANSACTION (
	ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1000),
	STOCKID INT NOT NULL,
	TDATE INT NOT NULL,
	QTY FLOAT(2) NOT NULL,
	PRICE FLOAT(2) NOT NULL,
	DELIVERYTYPE SMALLINT NOT NULL,
	PORTFOLIOID INT NOT NULL,
	TRADINGACCID INT NOT NULL,
	BROKERAGE FLOAT(2),
	SERVICETAX FLOAT(2),
	STT FLOAT(4),
	FOREIGN KEY (PORTFOLIOID) REFERENCES PORTFOLIO(ID),
	FOREIGN KEY (TRADINGACCID) REFERENCES TRADINGACC(ID),
	FOREIGN KEY (STOCKID) REFERENCES STOCKMASTER(ID)
);

CREATE TABLE SELLTRANSACTION (
	ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1000),
	TDATE INT NOT NULL,
	QTY FLOAT(2) NOT NULL,
	PRICE FLOAT(2) NOT NULL,
	BROKERAGE FLOAT(2),
	SERVICETAX FLOAT(2),
	STT FLOAT(4)
);

CREATE TABLE TRADE(
	ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1000),
	BUYID INT NOT NULL,
	SELLID INT  NOT NULL,
	QTY FLOAT(2) NOT NULL,
	FOREIGN KEY (BUYID) REFERENCES BUYTRANSACTION(ID),
	FOREIGN KEY (SELLID) REFERENCES SELLTRANSACTION(ID)
);

CREATE TABLE STOPLOSS(
	ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1000),
	STOCKID INT NOT NULL,
    PORTFOLIOID INT NOT NULL,
	STOPLOSS2 FLOAT(2),
	STOPLOSS1 FLOAT(2),
	TARGET1 FLOAT(2),
	TARGET2 FLOAT(2),
	FOREIGN KEY (STOCKID) REFERENCES STOCKMASTER(ID),
	FOREIGN KEY (PORTFOLIOID) REFERENCES PORTFOLIO(ID)
);

CREATE TABLE WATCHLISTGROUP (
	ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1000),
	NAME VARCHAR(20) NOT NULL ,
	ALERT SMALLINT
);

CREATE TABLE WATCHLIST(
	ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1000),
	STOCKID INT NOT NULL,
    WATCHLISTGROUPID INT NOT NULL,
	CEIL FLOAT(2),
	FLOOR FLOAT(2),
	FOREIGN KEY (STOCKID) REFERENCES STOCKMASTER(ID),
	FOREIGN KEY (WATCHLISTGROUPID) REFERENCES WATCHLISTGROUP(ID)
);

CREATE TABLE IPO(
	ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1000),
	IPOCODE VARCHAR(20) NOT NULL,
	APPLYDATE INT,
	APPLYQTY FLOAT(2),
	APPLYPRICE FLOAT(2),
    APPLIEDAMOUNT FLOAT(2),
	ALLOTMENTID INT,
	REFUNDDATE INT,
	REFUNDAMOUNT INT,
	PORTFOLIOID INT NOT NULL,
	TRADINGACCID INT NOT NULL,
	FOREIGN KEY (PORTFOLIOID) REFERENCES PORTFOLIO(ID),
	FOREIGN KEY (TRADINGACCID) REFERENCES TRADINGACC(ID),
	FOREIGN KEY (ALLOTMENTID) REFERENCES BUYTRANSACTION(ID)
);

CREATE TABLE CA_DIVIDENT(
    ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1000),
    STOCKID INT NOT NULL,
    EXDATE INT NOT NULL,
    DIVIDENT INT NOT NULL,
    ISPERCENTAGE SMALLINT,
    FOREIGN KEY (STOCKID) REFERENCES STOCKMASTER(ID)
);

CREATE TABLE CA_SPLIT(
    ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1000),
    STOCKID INT NOT NULL,
    EXDATE INT NOT NULL,
    NEWFACEVALUE INT NOT NULL,
    OLDFACEVALUE INT NOT NULL,
    FOREIGN KEY (STOCKID) REFERENCES STOCKMASTER(ID)
);

CREATE TABLE CA_SPLIT_MAPPING(
    SPLITID INT NOT NULL,
    TRANSACTIONID INT NOT NULL,
    FOREIGN KEY (SPLITID) REFERENCES CA_SPLIT(ID),
    FOREIGN KEY (TRANSACTIONID) REFERENCES BUYTRANSACTION(ID),
    CONSTRAINT UNIQUE_SPLIT_MAPPING UNIQUE(SPLITID,TRANSACTIONID)
);


CREATE TABLE CA_BONUS(
    ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1000),
    STOCKID INT NOT NULL,
    EXDATE INT NOT NULL,
    ALLOTMENTDATE INT,
    BONUS INT NOT NULL,
    BASE INT NOT NULL,
    FOREIGN KEY (STOCKID) REFERENCES STOCKMASTER(ID)
);

CREATE TABLE CA_BONUS_MAPPING(
    BONUSID INT NOT NULL,
    TRANSACTIONID INT NOT NULL,
    FOREIGN KEY (BONUSID) REFERENCES CA_BONUS(ID),
    FOREIGN KEY (TRANSACTIONID) REFERENCES BUYTRANSACTION(ID),
    CONSTRAINT UNIQUE_BONUS_MAPPING UNIQUE(BONUSID,TRANSACTIONID)
);

CREATE TABLE CA_DEMERGERBASE(
    ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1000),
    STOCKID INT NOT NULL,
    EXDATE INT NOT NULL,
    BASE INT NOT NULL,
    FOREIGN KEY (STOCKID) REFERENCES STOCKMASTER(ID)
);

CREATE TABLE CA_DEMERGERLIST(
    DEMERGERID INT NOT NULL,
    STOCKID INT NOT NULL,
    BOOKVALUERATIO FLOAT(2) NOT NULL,
    FOREIGN KEY (STOCKID) REFERENCES STOCKMASTER(ID),
    FOREIGN KEY (DEMERGERID) REFERENCES CA_DEMERGERBASE(ID)
);

CREATE TABLE CA_DEMERGER_MAPPING(
    DEMERGERID INT NOT NULL,
    TRANSACTIONID INT NOT NULL,
    FOREIGN KEY (DEMERGERID) REFERENCES CA_DEMERGERBASE(ID),
    FOREIGN KEY (TRANSACTIONID) REFERENCES BUYTRANSACTION(ID),
    CONSTRAINT UNIQUE_DEMERGER_MAPPING UNIQUE(DEMERGERID,TRANSACTIONID)
);

--DROP ALIAS CALCULATEDIVIDENT;

CREATE ALIAS calculateDivident FOR "pm.dao.derby.function.DividentFunction.calculateDivident";

